# How to create a new Process:
# Use the Keyword "Process" followed by the Name of the experiment if you want to set it
# Keyword: saveInput

# KeyWord of the Pipeline:
# disparity   cam1      cam2     option [pred_bidir, right_pred]
# depth       cam1      cam2     option [pred_bidir, right_pred]
# wrap        cam_dst   cam_src  depthTensor [pred_depth, pred_disp, depth_reg, disp_reg] option [depth, return_depth_reg, return_occlusion, cam_1 .... cam_n]
# valid       cam_reg   cam_ref
# save        dict_name [pred_depth, pred_disp, image_reg, depth_reg, disp_reg, inputs, occlusion]

#Process dummy :
#Depth-Depth:
#  depth:
#    cameras:
#    option:
#  disparity:
#    cameras:
#    option:
#  wrap:
#    cameras:
#    method:
#    source:
#    option:
#  valid:
#  save:
# --------------------------- Name --------------------------- #
Name: ---|| Process ||---

# --------------------------------------------------------------- #
# --------------------------- Options --------------------------- #
# --------------------------------------------------------------- #
Option:
  name_experiment: Example
  setup: # Paths to the config file of the pre-calibrated camera's setup
    path: Setup_Camera/example.yaml
  dataset:
    number_of_sample: 10
    shuffle: False
  realtime: True
  validation:
    post_validation: True
  monocular_depth_network:
    name: depthanything
  depth_network:
    name: unimatch
  disparity_network:
    name: unimatch

# --------------------------------------------------------------- #
# --------------------------- Process --------------------------- #
# --------------------------------------------------------------- #

Depth-Depth:
  depth:
    cameras: [RGB, RGB2]
    option: []
  wrap:
    cameras: [IR, RGB]
    method: depth
    option: [ return_occlusion ]
  valid: [IR, RGB]
  save: [ pred_depth, image_reg, occlusion ]

# --------------------------------------------------------------- #

Depth-Disparity:
  depth:
    cameras: [RGB, RGB2]
    option: []
  wrap:
    cameras: [IR, RGB]
    method: disparity
    option: [ return_occlusion ]
  valid: [IR, RGB]
  save: [ pred_depth, image_reg, occlusion ]

# --------------------------------------------------------------- #

Disparity-Disparity:
  disparity:
    cameras: [RGB, RGB2]
    option: []
  wrap:
    cameras: [IR, RGB]
    method: disparity
    option: [ return_occlusion ]
  valid: [IR, RGB]
  save: [ pred_depth, image_reg, occlusion ]

# --------------------------------------------------------------- #

Disparity-Depth:
  disparity:
    cameras: [RGB, RGB2]
    option: []
  wrap:
    cameras: [IR, RGB]
    method: depth
    option: [ return_occlusion ]
  valid: [ IR, RGB ]
  save: [ pred_depth, image_reg, occlusion ]

# --------------------------------------------------------------- #

monocular-Depth:
  monocular:
    cameras: [ RGB ]
    option: [ inference_size: [ 480, 640 ] ]
  wrap:
    cameras: [ IR, RGB ]
    method: depth
    option: [ return_occlusion ]
  valid: [ IR, RGB ]
  save: [ pred_depth, image_reg, occlusion ]

# --------------------------------------------------------------- #

monocular-Disparity:
  monocular:
    cameras: [ RGB ]
    option: [ inference_size: [ 480, 640 ] ]
  wrap:
    cameras: [ IR, RGB ]
    method: disparity
    option: [ return_occlusion ]
  valid: [ IR, RGB ]
  save: [ pred_depth, image_reg, occlusion ]